


elements <-  function(Y,W,G1,G2,Q,X,data,alpha,weight=NULL) {
  
  if (is.null(weight)) {
    data$weight=rep(1, nrow(data))
    weight <- "weight"
  }
  
  # estimate the nuisance functions within each group, so that the final estimates are independent across groups
  G1_index <- data[,G1]==1
  G2_index <- data[,G2]==1

  mainsample_G1 <- sample(nrow(data[G1_index,]), floor(nrow(data[G1_index,])/2), replace=F)
  auxsample_G1 <- setdiff(1:nrow(data[G1_index,]), mainsample_G1)
  mainsample_G2 <- sample(nrow(data[G2_index,]), floor(nrow(data[G2_index,])/2), replace=F)
  auxsample_G2 <- setdiff(1:nrow(data[G2_index,]), mainsample_G2)
  
  YgivenX.Pred_W0 <- YgivenX.Pred_W1 <- WgivenX.Pred <- rep(NA, nrow(data))
  
  YgivenX.Model.Aux_G1 <- train(as.formula(paste(Y, paste(W,paste(X,collapse="+"),sep="+"), sep="~")), data=data[mainsample_G1,], method="nnet", 
                             preProc=c("center","scale"), trControl=trainControl(method="none"), linout=TRUE, 
                             tuneGrid=expand.grid(size=2,decay=0.02))
  YgivenX.Model.Main_G1 <- train(as.formula(paste(Y, paste(W,paste(X,collapse="+"),sep="+"), sep="~")), data=data[auxsample_G1,], method="nnet",
                              preProc=c("center","scale"), trControl=trainControl(method="none"), linout=TRUE, 
                              tuneGrid=expand.grid(size=2,decay=0.02))
  YgivenX.Model.Aux_G2 <- train(as.formula(paste(Y, paste(W,paste(X,collapse="+"),sep="+"), sep="~")), data=data[mainsample_G2,], method="nnet", 
                                preProc=c("center","scale"), trControl=trainControl(method="none"), linout=TRUE, 
                                tuneGrid=expand.grid(size=2,decay=0.02))
  YgivenX.Model.Main_G2 <- train(as.formula(paste(Y, paste(W,paste(X,collapse="+"),sep="+"), sep="~")), data=data[auxsample_G2,], method="nnet",
                                 preProc=c("center","scale"), trControl=trainControl(method="none"), linout=TRUE, 
                                 tuneGrid=expand.grid(size=2,decay=0.02))
  
  pred_data <- data
  pred_data[,colnames(pred_data)%in%W] <- 0
  YgivenX.Pred_W0[G1_index][mainsample_G1] <- predict(YgivenX.Model.Aux_G1, newdata = pred_data[G1_index,][mainsample_G1,])
  YgivenX.Pred_W0[G1_index][auxsample_G1] <- predict(YgivenX.Model.Main_G1, newdata = pred_data[G1_index,][auxsample_G1,])
  YgivenX.Pred_W0[G2_index][mainsample_G2] <- predict(YgivenX.Model.Aux_G2, newdata = pred_data[G2_index,][mainsample_G2,])
  YgivenX.Pred_W0[G2_index][auxsample_G2] <- predict(YgivenX.Model.Main_G2, newdata = pred_data[G2_index,][auxsample_G2,])
  
  pred_data <- data
  pred_data[,colnames(pred_data)%in%W] <- 1
  YgivenX.Pred_W1[G1_index][mainsample_G1] <- predict(YgivenX.Model.Aux_G1, newdata = pred_data[G1_index,][mainsample_G1,])
  YgivenX.Pred_W1[G1_index][auxsample_G1] <- predict(YgivenX.Model.Main_G1, newdata = pred_data[G1_index,][auxsample_G1,])
  YgivenX.Pred_W1[G2_index][mainsample_G2] <- predict(YgivenX.Model.Aux_G2, newdata = pred_data[G2_index,][mainsample_G2,])
  YgivenX.Pred_W1[G2_index][auxsample_G2] <- predict(YgivenX.Model.Main_G2, newdata = pred_data[G2_index,][auxsample_G2,])
  
  
  data[,W] <- as.factor(data[,W])
  WgivenX.Model.Aux_G1 <- train(as.formula(paste(W, paste(X,collapse="+"), sep="~")), data=data[auxsample_G1,], method="nnet", 
                             preProc=c("center","scale"), trControl=trainControl(method="none"), linout=FALSE, 
                             tuneGrid=expand.grid(size=2,decay=0.02))
  WgivenX.Model.Main_G1 <- train(as.formula(paste(W, paste(X,collapse="+"), sep="~")), data=data[mainsample_G1,], method="nnet",
                              preProc=c("center","scale"), trControl=trainControl(method="none"), linout=FALSE,
                              tuneGrid=expand.grid(size=2,decay=0.02))
  WgivenX.Model.Aux_G2 <- train(as.formula(paste(W, paste(X,collapse="+"), sep="~")), data=data[auxsample_G2,], method="nnet", 
                                preProc=c("center","scale"), trControl=trainControl(method="none"), linout=FALSE, 
                                tuneGrid=expand.grid(size=2,decay=0.02))
  WgivenX.Model.Main_G2 <- train(as.formula(paste(W, paste(X,collapse="+"), sep="~")), data=data[mainsample_G2,], method="nnet",
                                 preProc=c("center","scale"), trControl=trainControl(method="none"), linout=FALSE,
                                 tuneGrid=expand.grid(size=2,decay=0.02))
  
  WgivenX.Pred[G1_index][mainsample_G1] <- predict(WgivenX.Model.Aux_G1, newdata=data[G1_index,][mainsample_G1,], type="prob")[,2]
  WgivenX.Pred[G1_index][auxsample_G1] <- predict(WgivenX.Model.Main_G1, newdata=data[G1_index,][auxsample_G1,], type="prob")[,2]
  WgivenX.Pred[G2_index][mainsample_G2] <- predict(WgivenX.Model.Aux_G2, newdata=data[G2_index,][mainsample_G2,], type="prob")[,2]
  WgivenX.Pred[G2_index][auxsample_G2] <- predict(WgivenX.Model.Main_G2, newdata=data[G2_index,][auxsample_G2,], type="prob")[,2]
  
  data[,W] <- as.numeric(data[,W])-1
  
  WgivenX.Pred[WgivenX.Pred<=0.20] <- 0.20
  WgivenX.Pred[WgivenX.Pred>=0.80] <- 0.80

  Y0_i <- ATT_i <- ATE_i <- wht <- rep(NA, nrow(data))
  
  wht[G1_index] <- data[,weight][G1_index]/mean(data[,weight][G1_index])
  wht[G2_index] <- data[,weight][G2_index]/mean(data[,weight][G2_index])
  
  Y0_i[G1_index] <- ( YgivenX.Pred_W0 + (1-data[,W])*(data[,Y]-YgivenX.Pred_W0)/(1-WgivenX.Pred) )[G1_index]*wht[G1_index]
  Y0_i[G2_index] <- ( YgivenX.Pred_W0 + (1-data[,W])*(data[,Y]-YgivenX.Pred_W0)/(1-WgivenX.Pred) )[G2_index]*wht[G2_index]
  
  ATT_i[G1_index] <- ( (data[,W]-(1-data[,W])*WgivenX.Pred/(1-WgivenX.Pred))*(data[,Y]-YgivenX.Pred_W0) )[G1_index]/mean(data[,W][G1_index]*wht[G1_index])*wht[G1_index]
  ATT_i[G2_index] <- ( (data[,W]-(1-data[,W])*WgivenX.Pred/(1-WgivenX.Pred))*(data[,Y]-YgivenX.Pred_W0) )[G2_index]/mean(data[,W][G2_index]*wht[G2_index])*wht[G2_index]
  
  ATE_i[G1_index] <- ( YgivenX.Pred_W1 + data[,W]*(data[,Y]-YgivenX.Pred_W1)/WgivenX.Pred - ( YgivenX.Pred_W0 + (1-data[,W])*(data[,Y]-YgivenX.Pred_W0)/(1-WgivenX.Pred) ) )[G1_index]*wht[G1_index]
  ATE_i[G2_index] <- ( YgivenX.Pred_W1 + data[,W]*(data[,Y]-YgivenX.Pred_W1)/WgivenX.Pred - ( YgivenX.Pred_W0 + (1-data[,W])*(data[,Y]-YgivenX.Pred_W0)/(1-WgivenX.Pred) ) )[G2_index]*wht[G2_index]

  se.Y0 <- 1/sqrt(nrow(data)/2)*
    sqrt(mean(( Y0_i[G1_index]-mean(Y0_i[G1_index])*wht[G1_index] )^2)
         + mean(( Y0_i[G2_index]-mean(Y0_i[G2_index])*wht[G2_index] )^2))
  
  se.D <- 1/sqrt(nrow(data)/2)*
    sqrt(var(data[,W][G1_index]*wht[G1_index])
         + var(data[,W][G2_index]*wht[G2_index]))
  
  se.ATE <- 1/sqrt(nrow(data)/2)*
    sqrt(mean(( ATE_i[G1_index]-mean(ATE_i[G1_index])*wht[G1_index] )^2)
         + mean(( ATE_i[G2_index]-mean(ATE_i[G2_index])*wht[G2_index] )^2))
  
  se.ATT <- 1/sqrt(nrow(data)/2)*
    sqrt(mean(( ATT_i[G1_index]-mean(ATT_i[G1_index])*data[,W][G1_index]/mean(data[,W][G1_index]*wht[G1_index])*wht[G1_index] )^2)
         + mean(( ATT_i[G2_index]-mean(ATT_i[G2_index])*data[,W][G2_index]/mean(data[,W][G2_index]*wht[G2_index])*wht[G2_index] )^2))
  
  total <- mean(data[,Y][G1_index]*wht[G1_index])-mean(data[,Y][G2_index]*wht[G2_index])
  baseline <- mean(Y0_i[G1_index])-mean(Y0_i[G2_index])
  prevalence <- (1/2)*(mean(ATE_i[G1_index])+mean(ATE_i[G2_index]))*(mean(data[,W][G1_index]*wht[G1_index])-mean(data[,W][G2_index]*wht[G2_index]))
  effect <- (1/2)*(mean(data[,W][G1_index]*wht[G1_index])+mean(data[,W][G2_index]*wht[G2_index]))*(mean(ATE_i[G1_index])-mean(ATE_i[G2_index]))
  selection <- (mean(ATT_i[G1_index])-mean(ATE_i[G1_index]))*mean(data[,W][G1_index]*wht[G1_index])-
    (mean(ATT_i[G2_index])-mean(ATE_i[G2_index]))*mean(data[,W][G2_index]*wht[G2_index])
  
  baseline+prevalence+effect+selection

  se.baseline <- se.Y0
  
  se.prevalence <- 1/sqrt(nrow(data)/2)*(1/2)*(mean(ATE_i[G1_index])+mean(ATE_i[G2_index]))*
    sqrt(mean((data[,W][G1_index]-mean(data[,W][G1_index]*wht[G1_index]))^2*wht[G1_index])
         + mean((data[,W][G2_index]-mean(data[,W][G2_index]*wht[G2_index]))^2*wht[G2_index]))
  
  se.effeft <- 1/sqrt(nrow(data)/2)*(1/2)*(mean(data[,W][G1_index]*wht[G1_index])+mean(data[,W][G2_index]*wht[G2_index]))*
    sqrt(mean(( ATE_i[G1_index]-mean(ATE_i[G1_index])*wht[G1_index] )^2)
         + mean(( ATE_i[G2_index]-mean(ATE_i[G2_index])*wht[G2_index] )^2))
  
  se.selection <- 1/sqrt(nrow(data)/2)*sqrt( 
    mean(data[,W][G1_index]*wht[G1_index])^2*mean((ATT_i[G1_index]-mean(ATT_i[G1_index])*data[,W][G1_index]/mean(data[,W][G1_index]*wht[G1_index])*wht[G1_index] - ATE_i[G1_index]+mean(ATE_i[G1_index])*wht[G1_index])^2) +
      mean(data[,W][G2_index]*wht[G2_index])^2*mean((ATT_i[G2_index]-mean(ATT_i[G2_index])*data[,W][G2_index]/mean(data[,W][G2_index]*wht[G2_index])*wht[G2_index] - ATE_i[G2_index]+mean(ATE_i[G2_index])*wht[G2_index])^2))

  
  inference <- function(ave, se, alpha=alpha) {
    return(c(2*(1-pnorm(abs(ave/se))),
          ave-se*qnorm(p=1-alpha/2),
          ave+se*qnorm(p=1-alpha/2)))
  }
  
  inference(ave=baseline, se=se.baseline)
  
  output <- 
    as.data.frame(rbind(
      c(mean(data[,Y][G1_index]), asy_CI(data[,Y][G1_index]), 
        mean(data[,Y][G2_index]), asy_CI(data[,Y][G2_index]),
        mean(data[,Y][G1_index])-mean(data[,Y][G2_index]), asy_CI(data[,Y][G1_index],data[,Y][G2_index])),
      
      c(mean(Y0_i[G1_index]), asy_CI(Y0_i[G1_index]), 
        mean(Y0_i[G2_index]), asy_CI(Y0_i[G2_index]),
        mean(Y0_i[G1_index])-mean(Y0_i[G2_index]), asy_CI(Y0_i[G1_index],Y0_i[G2_index])),
      
      c(mean(data[,W][G1_index]), asy_CI(data[,W][G1_index]),
        mean(data[,W][G2_index]), asy_CI(data[,W][G2_index]),
        mean(data[,W][G1_index])-mean(data[,W][G2_index]), asy_CI(data[,W][G1_index],data[,W][G2_index])),
      
      c(mean(ATE_i[G1_index]), asy_CI(ATE_i[G1_index]),
        mean(ATE_i[G2_index]), asy_CI(ATE_i[G2_index]),
        mean(ATE_i[G1_index])-mean(ATE_i[G2_index]), asy_CI(ATE_i[G1_index],ATE_i[G2_index])),
      
      c(mean(ATT_i[G1_index]/mean(data[,W][G1_index])), asy_CI(ATT_i[G1_index]/mean(data[,W][G1_index])),
        mean(ATT_i[G2_index]/mean(data[,W][G2_index])), asy_CI(ATT_i[G2_index]/mean(data[,W][G2_index])),
        mean(ATT_i[G1_index]/mean(data[,W][G1_index]))-mean(ATT_i[G2_index]/mean(data[,W][G2_index])), asy_CI(ATT_i[G1_index]/mean(data[,W][G1_index]),ATT_i[G2_index]/mean(data[,W][G2_index])))
    ))
  
  row.names(output) <- c("total","baseline","prevalence","ATE","ATT")
  colnames(output) <- c("G1.Mean","G1.Upper","G1.Lower","G2.Mean","G2.Upper","G2.Lower","Diff.Mean","Diff.Upper","Diff.Lower")
  
  return(output)
}



estimate <-  function(Y,W,G1,G2,Q,X,data,alpha) {
  
  elements_output <- elements(Y,W,G1,G2,Q,X,data,alpha)
  
  total <- elements_output$Diff.Mean[1]
  
  baseline <- elements_output$Diff.Mean[2]
  prevalence <- (1/2)*(elements_output$G1.Mean[4]+elements_output$G2.Mean[4])*elements_output$Diff.Mean[3]
  effect <- (1/2)*(elements_output$G1.Mean[3]+elements_output$G2.Mean[3])*elements_output$Diff.Mean[4]
  selection <- (elements_output$G1.Mean[5]-elements_output$G1.Mean[4])*elements_output$G1.Mean[3]-
    (elements_output$G2.Mean[5]-elements_output$G2.Mean[4])*elements_output$G2.Mean[3]
  
  mainsample <- sample(nrow(data), floor(nrow(data)/2), replace=F)
  auxsample <- setdiff(1:nrow(data), mainsample)
  
  G1givenQ.Pred <- G2givenQ.Pred <- rep(NA, nrow(data))
  
  G1_index <- data[,G1]==1
  G2_index <- data[,G2]==1
  
  data[,G1] <- as.factor(data[,G1])
  G1givenQ.Model.Aux <- train(as.formula(paste(G1, paste(Q,collapse="+"), sep="~")), data=data[auxsample,], method="nnet", 
                              preProc=c("center","scale"), trControl=trainControl(method="none"), linout=FALSE, 
                              tuneGrid=expand.grid(size=2,decay=0.02))
  G1givenQ.Model.Main <- train(as.formula(paste(G1, paste(Q,collapse="+"), sep="~")), data=data[mainsample,], method="nnet",
                               preProc=c("center","scale"), trControl=trainControl(method="none"), linout=FALSE, 
                               tuneGrid=expand.grid(size=2,decay=0.02))
  G1givenQ.Pred[mainsample] <- predict(G1givenQ.Model.Aux, newdata = data[mainsample,], type="prob")[,2]
  G1givenQ.Pred[auxsample] <- predict(G1givenQ.Model.Main, newdata = data[auxsample,], type="prob")[,2]
  data[,G1] <- as.numeric(data[,G1])-1
  
  data[,G2] <- as.factor(data[,G2])
  G2givenQ.Model.Aux <- train(as.formula(paste(G2, paste(Q,collapse="+"), sep="~")), data=data[auxsample,], method="nnet",
                              preProc=c("center","scale"), trControl=trainControl(method="none"), linout=FALSE, 
                              tuneGrid=expand.grid(size=2,decay=0.02)) 
  G2givenQ.Model.Main <- train(as.formula(paste(G2, paste(Q,collapse="+"), sep="~")), data=data[mainsample,], method="nnet",
                               preProc=c("center","scale"), trControl=trainControl(method="none"), linout=FALSE, 
                               tuneGrid=expand.grid(size=2,decay=0.02))
  G2givenQ.Pred[mainsample] <- predict(G2givenQ.Model.Aux, newdata = data[mainsample,], type="prob")[,2]
  G2givenQ.Pred[auxsample] <- predict(G2givenQ.Model.Main, newdata = data[auxsample,], type="prob")[,2]
  data[,G2] <- as.numeric(data[,G2])-1
  
  weight_cond_prev <- (G1givenQ.Pred/G2givenQ.Pred)*(mean(data[,G2])/mean(data[,G1]))
  
  sum(weight_cond_prev>=10)
  weight_cond_prev[weight_cond_prev>=10] <- 10
  
  cond_prev <- (1/2)*(elements_output$G1.Mean[4]+elements_output$G2.Mean[4])*(mean(data[,W][G1_index]) - mean((weight_cond_prev/mean(weight_cond_prev[G2_index])*data[,W])[G2_index]))
  
  return(c(total, baseline, prevalence, effect, selection, cond_prev))
  
}

caudec <- function(Y,W,G1,G2,Q,X,data,k,alpha) {
  message <- capture.output(original_output <- estimate(Y,W,G1,G2,Q,X,data,alpha))
  
  boot_output <- matrix(nrow=k, ncol=6)
  for (i in 1: k) {
    data_boot <- data[sample(1:nrow(data), nrow(data), replace = TRUE),]
    message <- capture.output(boot_output[i,] <- estimate(Y,W,G1,G2,Q,X,data_boot,alpha))
  }
  
  boot_total_lower <- 2*original_output[1]-boot_output[,1][order(boot_output[,1])][floor(k*(1-alpha/2))]
  boot_total_upper <- 2*original_output[1]-boot_output[,1][order(boot_output[,1])][ceiling(k*alpha/2)]
  
  boot_baseline_lower <- 2*original_output[2]-boot_output[,2][order(boot_output[,2])][floor(k*(1-alpha/2))]
  boot_baseline_upper <- 2*original_output[2]-boot_output[,2][order(boot_output[,2])][ceiling(k*alpha/2)]
  
  boot_prevalence_lower <- 2*original_output[3]-boot_output[,3][order(boot_output[,3])][floor(k*(1-alpha/2))]
  boot_prevalence_upper <- 2*original_output[3]-boot_output[,3][order(boot_output[,3])][ceiling(k*alpha/2)]
  
  boot_effect_lower <- 2*original_output[4]-boot_output[,4][order(boot_output[,4])][floor(k*(1-alpha/2))]
  boot_effect_upper <- 2*original_output[4]-boot_output[,4][order(boot_output[,4])][ceiling(k*alpha/2)]
  
  boot_selection_lower <- 2*original_output[5]-boot_output[,5][order(boot_output[,5])][floor(k*(1-alpha/2))]
  boot_selection_upper <- 2*original_output[5]-boot_output[,5][order(boot_output[,5])][ceiling(k*alpha/2)]
  
  boot_cond_prev_lower <- 2*original_output[6]-boot_output[,6][order(boot_output[,6])][floor(k*(1-alpha/2))]
  boot_cond_prev_upper <- 2*original_output[6]-boot_output[,6][order(boot_output[,6])][ceiling(k*alpha/2)]
  
  output <- as.data.frame(cbind(original_output, 
                                c(2*original_output[1]-boot_output[,1][order(boot_output[,1])][floor(k*(1-alpha/2))],
                                  2*original_output[2]-boot_output[,2][order(boot_output[,2])][floor(k*(1-alpha/2))],
                                  2*original_output[3]-boot_output[,3][order(boot_output[,3])][floor(k*(1-alpha/2))],
                                  2*original_output[4]-boot_output[,4][order(boot_output[,4])][floor(k*(1-alpha/2))],
                                  2*original_output[5]-boot_output[,5][order(boot_output[,5])][floor(k*(1-alpha/2))],
                                  2*original_output[6]-boot_output[,6][order(boot_output[,6])][floor(k*(1-alpha/2))]),
                                c(2*original_output[1]-boot_output[,1][order(boot_output[,1])][floor(k*alpha/2)],
                                  2*original_output[2]-boot_output[,2][order(boot_output[,2])][floor(k*alpha/2)],
                                  2*original_output[3]-boot_output[,3][order(boot_output[,3])][floor(k*alpha/2)],
                                  2*original_output[4]-boot_output[,4][order(boot_output[,4])][floor(k*alpha/2)],
                                  2*original_output[5]-boot_output[,5][order(boot_output[,5])][floor(k*alpha/2)],
                                  2*original_output[6]-boot_output[,6][order(boot_output[,6])][floor(k*alpha/2)])))
  colnames(output) <- c("estimate","lower","upper")
  row.names(output) <- c("total","baseline","prevalence","effect","selection","cond_prev")
  return(output)
}

set.seed(36)
temp1 <- caudec(Y,W,G1="race1",G2="race2",Q,X,data,k=200,alpha)
format(round(temp1, 3), nsmall = 3)

tab <- xtable(temp1, caption= "caudec estimates",digits=3)
print(tab, caption.placement="top", hline.after=c(-1,0,6))



